# HTTPS Server (Port 443) - Serves Secure Content
server
{
	listen 443 ssl;
	# Configures the server to listen on port 443 for IPv4 connections with SSL/TLS enabled
	# (might automatically listen on both IPv4 and IPv6 sockets if the system supports it)
	listen [::]:443 ssl;
	# Configures the server to listen on port 443 for IPv6 connections with SSL/TLS enabled
	
	server_name caguillo.42.fr;

	# TLS Configuration	
	# ssl on;
	# ssl_protocols TLSv1.2 TLSv1.3;
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.key;		

	# Root directive specifies the base directory where Nginx should look for files when serving a request
	# root = /var/www/html; => for http://toto.com/index.html, nginx will look for /var/www/html/index.html
	# root = /var/www/wordpress; => for http://toto.com/index.php, nginx will look for /var/www/wordpress/index.php.
	root /var/www/wordpress;
	# root /var/www/html;			

	# First page index
	index index.php index.html index.htm wordpress/index.php index.nginx-debian.html;

	location /
	{
		try_files $uri $uri/ /index.php$is_args$args;
		# try_files $uri $uri/ =404;
	}
	# try_files --> check for the existence of files or directories in a specific order and decide how to handle the request
	# $uri --> nginx checks if a file exists that matches the requested URI (ex: /about maps to /var/www/html/about)
	# $uri/ --> nginx checks if a directory exists that matches this (ex: /about/ would map to /var/www/html/about/)
	# if not nginx return a 404 error --> amended to php checking
	# if not nginx passes the request to index.php with query parameters ($is_args$args).
	
	# re php requests, must go to php, which is inside wordpress
	# so forward PHP calls to FastCGI server
	location ~ \.php$
	{
		# fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# fastcgi_index index.php;
		# include fastcgi_params;
		# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # handling PHP requests in Nginx.
		# fastcgi_param PATH_INFO $fastcgi_path_info;
		include snippets/fastcgi-php.conf; # contains the 5 settings above
		fastcgi_pass wordpress:9000;			
		fastcgi_intercept_errors on;
		error_page 404 /404.html;
	}
	# SCRIPT_FILENAME tells PHP-FPM which PHP script to execute.
	# $document_root$fastcgi_script_name constructs the full file path dynamically
	# ex:/var/www/wordpress+/index.php for www.toto.com/index.php
	# PATH_INFO contains the extra part of the URL after the PHP script www.toto.com/index.php/extra/part

	# Note try_files / 404
	# If a requested file or directory exists -> Serve it
	# If not, but index.php exists -> Pass request to WordPress
	# If index.php does not exist -> Return 404
	# If a .php file does not exist -> Return 404

	location /adminer
	{
		rewrite ^/adminer(/.*)$ $1 break; # Remove "/adminer" from the request path: adminer/login.php = /login.php
		proxy_pass http://adminer:8080; # Adminerâ€™s PHP server listens on port 8080
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}		

	location /static
	{
		proxy_pass http://static:2000;			
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# to declined .php inside static
		location ~ \.php$ 
		{
			return 404;
		}			
	}
}

# --> not authorized by the subject, only 443 (below, it redirects, yes, but get a 80 to redirect, so no)
# # HTTP Server (Port 80) - Redirects to HTTPS
# server
# {
# 	listen 80; # Listen on port 80 for HTTP 
# 	listen [::]:80;
# 	server_name caguillo.42.fr;
# 	return 301 https://$server_name$request_uri;  # Redirect permanent (301) all HTTP traffic to HTTPS
# }		


# Note: here is the process of a request :
# 1. Firefox sends a request to caguillo.42.fr, which your computer resolves to 127.0.0.1. (in /etc/hosts)
# 2. So in local, the request reaches your local Docker container running Nginx.
# 3. Nginx proxies the request to the wordpress container.
# 4. The WordPress container processes the request and sends back the HTML page. (thanks to php-fpm)
# 5. Nginx forwards the response back to your browser.
# 6. Firefox renders your WordPress site.